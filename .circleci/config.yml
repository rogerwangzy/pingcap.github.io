version: 2
jobs:
  build:
    docker:
      - image: circleci/node:12.16.1
    steps:
      - add_ssh_keys:
          fingerprints:
            # https://circleci.com/gh/pingcap/pingcap.github.io/edit#checkout
            - '1b:b6:ef:e0:fb:85:6d:8f:78:87:a6:ce:1f:34:ec:66'
            # Use in scripts/push-gh-pages.sh
            - '6a:a6:ac:e8:9e:ee:7d:ef:18:92:94:0b:b0:2c:34:82'

      - checkout

      # Dependencies required for deploy
      # m4 for OCaml
      - run: sudo apt update && sudo apt install rsync python3-pip m4 -y
      - run: pip3 install -r requirements.txt

      # Download and cache dependencies and submodules
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # Fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: npm install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      - run: npm run build

      - run:
         name: consolidate duplicate URLs
         command: bash ./scripts/consolidate-duplicate-urls.sh

      - deploy:
          name: 'Publish Website'
          command: |
            if [ "${CIRCLE_BRANCH}" == "src" ]
            then
              ssh-keyscan "${DEPLOY_UCLOUD_BJ_1_HOST}" >> ~/.ssh/known_hosts 2>/dev/null;
              rsync -avz --delete dist/ "${DEPLOY_UCLOUD_USER}@${DEPLOY_UCLOUD_BJ_1_HOST}:${DEPLOY_UCLOUD_PATH}";
              ssh-keyscan "${DEPLOY_UCLOUD_BJ_2_HOST}" >> ~/.ssh/known_hosts 2>/dev/null;
              rsync -avz --delete dist/ "${DEPLOY_UCLOUD_USER}@${DEPLOY_UCLOUD_BJ_2_HOST}:${DEPLOY_UCLOUD_PATH}";
              ssh-keyscan "${DEPLOY_UCLOUD_LA_1_HOST}" >> ~/.ssh/known_hosts 2>/dev/null;
              rsync -avz --delete dist/ "${DEPLOY_UCLOUD_USER}@${DEPLOY_UCLOUD_LA_1_HOST}:${DEPLOY_UCLOUD_PATH}";
              ssh-keyscan "${DEPLOY_UCLOUD_LA_2_HOST}" >> ~/.ssh/known_hosts 2>/dev/null;
              rsync -avz --delete dist/ "${DEPLOY_UCLOUD_USER}@${DEPLOY_UCLOUD_LA_2_HOST}:${DEPLOY_UCLOUD_PATH}";
              curl "http://www.google.com/ping?sitemap=https://pingcap.com/sitemap.xml"
            fi

      - deploy:
          name: "Publish pingcap.github.io"
          command: |
            if [ "${CIRCLE_BRANCH}" == "src" ]
            then
              sh ./scripts/push-gh-pages.sh;
            fi

      # Start to sync static folder
      - run: git clone https://github.com/pingcap/cloud-assets-utils.git --depth 1

      - restore_cache:
          keys:
            - opam-cache-{{ checksum "cloud-assets-utils/dune-project" }}

      - run:
          name: Initialize opam
          command: |
            echo | sh <(curl -sL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)
            opam init -c 4.07.1 --disable-sandboxing -y && opam switch 4.07.1 -y
            opam install dune core -y

      - save_cache:
          key: opam-cache-{{ checksum "cloud-assets-utils/dune-project" }}
          paths:
            - ~/.opam

      - run:
          name: Configure qshell
          command: |
            curl http://devtools.qiniu.com/qshell-linux-x64-v2.4.1.zip -o qshell.zip
            unzip qshell.zip
            sudo mv qshell-linux-x64-v2.4.1 /usr/local/bin/qshell
            qshell account ${QINIU_ACCESS_KEY} ${QINIU_SECRET_KEY} test
      - run:
          name: configure awscli
          command: |
            sudo pip3 install awscli
            printf "%s\n" ${AWS_ACCESS_KEY} ${AWS_SECRET_KEY} ${AWS_REGION} "json" | aws configure

      - run:
          name: Build cloud_assets_utils
          command: |
            eval $(opam env) && cd cloud-assets-utils && dune build
            sudo cp ./_build/default/bin/cloud_assets_utils.exe /usr/local/bin/cloud-assets-utils

      - run: cloud-assets-utils verify-and-sync -qiniu true -qiniu-bucket ${QINIU_BUCKET_NAME} -aws true -aws-bucket ${AWS_BUCKET_NAME} static -cdn-refresh https://download.pingcap.com/
      - run: cd content/blog && cloud-assets-utils verify-and-sync -qiniu true -qiniu-bucket ${QINIU_BUCKET_NAME} -aws true -aws-bucket ${AWS_BUCKET_NAME} media -replace-first-path-to images/blog -cdn-refresh https://download.pingcap.com/
      - run: cd content/blog-cn && cloud-assets-utils verify-and-sync -qiniu true -qiniu-bucket ${QINIU_BUCKET_NAME} -aws true -aws-bucket ${AWS_BUCKET_NAME} media -replace-first-path-to images/blog-cn -cdn-refresh https://download.pingcap.com/
      - run: cd content/docs/dev && cloud-assets-utils verify-and-sync -qiniu true -qiniu-bucket ${QINIU_BUCKET_NAME} -aws true -aws-bucket ${AWS_BUCKET_NAME} media -replace-first-path-to images/docs/dev -cdn-refresh https://download.pingcap.com/
      - run: mv content/docs/stable content/docs/v3.0 && cd content/docs/v3.0 && cloud-assets-utils verify-and-sync -qiniu true -qiniu-bucket ${QINIU_BUCKET_NAME} -aws true -aws-bucket ${AWS_BUCKET_NAME} media -replace-first-path-to images/docs/stable -cdn-refresh https://download.pingcap.com/
      - run: cd content/docs/v2.1 && cloud-assets-utils verify-and-sync -qiniu true -qiniu-bucket ${QINIU_BUCKET_NAME} -aws true -aws-bucket ${AWS_BUCKET_NAME} media -replace-first-path-to images/docs/v2.1 -cdn-refresh https://download.pingcap.com/
      - run: cd content/docs/v3.1 && cloud-assets-utils verify-and-sync -qiniu true -qiniu-bucket ${QINIU_BUCKET_NAME} -aws true -aws-bucket ${AWS_BUCKET_NAME} media -replace-first-path-to images/docs/v3.1 -cdn-refresh https://download.pingcap.com/
      - run: cd content/docs-cn/dev && cloud-assets-utils verify-and-sync -qiniu true -qiniu-bucket ${QINIU_BUCKET_NAME} -aws true -aws-bucket ${AWS_BUCKET_NAME} media -replace-first-path-to images/docs-cn/dev -cdn-refresh https://download.pingcap.com/
      - run: mv content/docs-cn/stable content/docs-cn/v3.0 && cd content/docs-cn/v3.0 && cloud-assets-utils verify-and-sync -qiniu true -qiniu-bucket ${QINIU_BUCKET_NAME} -aws true -aws-bucket ${AWS_BUCKET_NAME} media -replace-first-path-to images/docs-cn/stable -cdn-refresh https://download.pingcap.com/
      - run: cd content/docs-cn/v2.1 && cloud-assets-utils verify-and-sync -qiniu true -qiniu-bucket ${QINIU_BUCKET_NAME} -aws true -aws-bucket ${AWS_BUCKET_NAME} media -replace-first-path-to images/docs-cn/v2.1 -cdn-refresh https://download.pingcap.com/
      - run: cd content/docs-cn/v3.1 && cloud-assets-utils verify-and-sync -qiniu true -qiniu-bucket ${QINIU_BUCKET_NAME} -aws true -aws-bucket ${AWS_BUCKET_NAME} media -replace-first-path-to images/docs-cn/v3.1 -cdn-refresh https://download.pingcap.com/
      - run: cd content/meetup && cloud-assets-utils verify-and-sync -qiniu true -qiniu-bucket ${QINIU_BUCKET_NAME} -aws true -aws-bucket ${AWS_BUCKET_NAME} media -replace-first-path-to images/meetup -cdn-refresh https://download.pingcap.com/
      - run: cd content/weekly && cloud-assets-utils verify-and-sync -qiniu true -qiniu-bucket ${QINIU_BUCKET_NAME} -aws true -aws-bucket ${AWS_BUCKET_NAME} media -replace-first-path-to images/weekly -cdn-refresh https://download.pingcap.com/
  preview:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - run: curl -X POST -d {} https://api.netlify.com/build_hooks/5e71c8a620f3419c2fea69cc
workflows:
  version: 2
  build:
    jobs:
      - build:
          filters:
            branches:
              only:
                - src
                - preview
      - preview:
          filters:
            branches:
              only:
                - preview
